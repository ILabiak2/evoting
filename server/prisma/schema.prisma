generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auth_providers {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String?   @db.Uuid
  provider         String
  provider_user_id String?
  password_hash    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, provider])
}

model refresh_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  token      String    @unique
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String           @unique
  name           String?
  avatar_url     String?
  role           String?          @default("user")
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  auth_providers auth_providers[]
  refresh_tokens refresh_tokens[]
  wallets        wallets[]
  invites        invites[]        @relation("UsedInvites")
  user_elections user_elections[]
}

model wallets {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?   @db.Uuid
  public_address String
  vault_key_name String
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum ElectionType {
  public_single_choice
  private_single_choice
}

model elections_metadata {
  id              Int          @id
  electionAddress String       @unique
  factoryAddress  String
  name            String?
  creator         String?
  electionType    ElectionType
  createdAt       DateTime     @default(now())

  invites       invites[]
  userElections user_elections[]

  @@index([electionAddress])
}

model invites {
  id        String    @id @default(uuid())
  code      String    @unique
  isUsed    Boolean   @default(false)
  isExpired Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  usedById String?    @db.Uuid 
  usedBy   users?  @relation("UsedInvites", fields: [usedById], references: [id])

  electionId   Int
  electionMeta elections_metadata @relation(fields: [electionId], references: [id])

  @@index([electionId])
}

model user_elections {
  id           String             @id @default(uuid())
  user_id      String             @db.Uuid 
  electionId   Int
  user         users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  electionMeta elections_metadata @relation(fields: [electionId], references: [id])

  @@unique([user_id, electionId])
  @@index([user_id])
  @@index([electionId])
}
