generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auth_providers {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String?   @db.Uuid
  provider         String
  provider_user_id String?
  password_hash    String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, provider])
}

model refresh_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  token      String    @unique
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String           @unique
  name           String?
  avatar_url     String?
  role           String?          @default("user")
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  auth_providers auth_providers[]
  refresh_tokens refresh_tokens[]
  wallets        wallets[]
  invites        invites[]        @relation("UsedInvites")
  user_elections user_elections[]
  events         events[]
}

model wallets {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?   @db.Uuid
  public_address String
  vault_key_name String
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum ElectionType {
  public_single_choice
  private_single_choice
  public_multi_choice
  private_multi_choice
}

model elections_metadata {
  id               Int          @id @default(autoincrement())
  contract_id      Int
  election_address String       @unique
  factory_address  String
  name             String?
  creator          String?
  election_type    ElectionType
  created_at       DateTime     @default(now())

  invites        invites[]
  user_elections user_elections[]
  events         events[]

  @@index([election_address])
}

model invites {
  id         String    @id @default(uuid())
  code       String    @unique
  is_used    Boolean   @default(false)
  is_expired Boolean   @default(false)
  created_at DateTime  @default(now())
  used_at    DateTime?

  used_by_id String? @db.Uuid
  used_by    users?  @relation("UsedInvites", fields: [used_by_id], references: [id])

  election_id   Int
  election_meta elections_metadata @relation(fields: [election_id], references: [id])

  @@index([election_id])
}

model user_elections {
  id            Int                @id @default(autoincrement())
  user_id       String             @db.Uuid
  election_id   Int
  user          users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  election_meta elections_metadata @relation(fields: [election_id], references: [id])

  @@unique([user_id, election_id])
  @@index([user_id])
  @@index([election_id])
}

model events {
  id              Int                @id @default(autoincrement())
  user_id         String             @db.Uuid
  tx_hash         String
  description     String
  factory_address String
  election_id     Int
  created_at      DateTime           @default(now())
  time            DateTime
  user            users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  election_meta   elections_metadata @relation(fields: [election_id], references: [id])

  @@unique([user_id, tx_hash])
  @@index([tx_hash, factory_address])
  @@index([user_id])
  @@index([election_id])
}
