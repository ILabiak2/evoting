/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VotingSystem {
  export type CandidateViewStruct = {
    id: BigNumberish;
    name: string;
    voteCount: BigNumberish;
  };

  export type CandidateViewStructOutput = [
    id: bigint,
    name: string,
    voteCount: bigint
  ] & { id: bigint; name: string; voteCount: bigint };

  export type ElectionWithCandidatesStruct = {
    id: BigNumberish;
    name: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    startedManually: boolean;
    endedManually: boolean;
    candidateCount: BigNumberish;
    voterLimit: BigNumberish;
    candidates: VotingSystem.CandidateViewStruct[];
  };

  export type ElectionWithCandidatesStructOutput = [
    id: bigint,
    name: string,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    startedManually: boolean,
    endedManually: boolean,
    candidateCount: bigint,
    voterLimit: bigint,
    candidates: VotingSystem.CandidateViewStructOutput[]
  ] & {
    id: bigint;
    name: string;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    startedManually: boolean;
    endedManually: boolean;
    candidateCount: bigint;
    voterLimit: bigint;
    candidates: VotingSystem.CandidateViewStructOutput[];
  };

  export type CandidateStruct = {
    id: BigNumberish;
    name: string;
    voteCount: BigNumberish;
  };

  export type CandidateStructOutput = [
    id: bigint,
    name: string,
    voteCount: bigint
  ] & { id: bigint; name: string; voteCount: bigint };
}

export interface VotingSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ELECTION_TYPEHASH"
      | "MAX_CANDIDATES"
      | "addCandidates"
      | "admin"
      | "createElection"
      | "createElectionWithSignature"
      | "eip712Domain"
      | "electionCandidates"
      | "electionCounter"
      | "elections"
      | "endElection"
      | "getActiveElections"
      | "getAllElections"
      | "getCandidates"
      | "getElectionsByIds"
      | "getMyElections"
      | "getMyVote"
      | "getResults"
      | "getUserElections"
      | "startElection"
      | "vote"
      | "voteWithSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "ElectionCreated"
      | "ElectionEnded"
      | "ElectionStarted"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ELECTION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CANDIDATES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCandidates",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createElection",
    values: [string, boolean, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createElectionWithSignature",
    values: [string, boolean, BigNumberish, AddressLike, string[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionCandidates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserElections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteWithSignature",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ELECTION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CANDIDATES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createElectionWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteWithSignature",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [electionId: BigNumberish, name: string];
  export type OutputTuple = [electionId: bigint, name: string];
  export interface OutputObject {
    electionId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionEndedEvent {
  export type InputTuple = [electionId: BigNumberish];
  export type OutputTuple = [electionId: bigint];
  export interface OutputObject {
    electionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionStartedEvent {
  export type InputTuple = [electionId: BigNumberish];
  export type OutputTuple = [electionId: bigint];
  export interface OutputObject {
    electionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    candidateId: BigNumberish,
    voter: AddressLike
  ];
  export type OutputTuple = [
    electionId: bigint,
    candidateId: bigint,
    voter: string
  ];
  export interface OutputObject {
    electionId: bigint;
    candidateId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingSystem extends BaseContract {
  connect(runner?: ContractRunner | null): VotingSystem;
  waitForDeployment(): Promise<this>;

  interface: VotingSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ELECTION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  MAX_CANDIDATES: TypedContractMethod<[], [bigint], "view">;

  addCandidates: TypedContractMethod<
    [_electionId: BigNumberish, _names: string[]],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  createElection: TypedContractMethod<
    [
      _name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _candidateNames: string[]
    ],
    [void],
    "nonpayable"
  >;

  createElectionWithSignature: TypedContractMethod<
    [
      _name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _creator: AddressLike,
      _candidateNames: string[],
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  electionCandidates: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint] & { id: bigint; name: string; voteCount: bigint }
    ],
    "view"
  >;

  electionCounter: TypedContractMethod<[], [bigint], "view">;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        name: string;
        startTime: bigint;
        endTime: bigint;
        voterLimit: bigint;
        startedManually: boolean;
        endedManually: boolean;
        isActive: boolean;
        candidateCount: bigint;
        voterCount: bigint;
      }
    ],
    "view"
  >;

  endElection: TypedContractMethod<
    [_electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveElections: TypedContractMethod<
    [],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;

  getAllElections: TypedContractMethod<
    [],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;

  getCandidates: TypedContractMethod<
    [_electionId: BigNumberish],
    [VotingSystem.CandidateViewStructOutput[]],
    "view"
  >;

  getElectionsByIds: TypedContractMethod<
    [ids: BigNumberish[]],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;

  getMyElections: TypedContractMethod<
    [],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;

  getMyVote: TypedContractMethod<
    [_electionId: BigNumberish],
    [
      [boolean, bigint, string] & {
        hasVoted: boolean;
        candidateId: bigint;
        candidateName: string;
      }
    ],
    "view"
  >;

  getResults: TypedContractMethod<
    [_electionId: BigNumberish],
    [VotingSystem.CandidateStructOutput[]],
    "view"
  >;

  getUserElections: TypedContractMethod<
    [user: AddressLike],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;

  startElection: TypedContractMethod<
    [_electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteWithSignature: TypedContractMethod<
    [
      _electionId: BigNumberish,
      _candidateId: BigNumberish,
      _voter: AddressLike,
      voterSignature: BytesLike,
      authSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ELECTION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_CANDIDATES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCandidates"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _names: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<
    [
      _name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _candidateNames: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createElectionWithSignature"
  ): TypedContractMethod<
    [
      _name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _creator: AddressLike,
      _candidateNames: string[],
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionCandidates"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint] & { id: bigint; name: string; voteCount: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        name: string;
        startTime: bigint;
        endTime: bigint;
        voterLimit: bigint;
        startedManually: boolean;
        endedManually: boolean;
        isActive: boolean;
        candidateCount: bigint;
        voterCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endElection"
  ): TypedContractMethod<[_electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveElections"
  ): TypedContractMethod<
    [],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllElections"
  ): TypedContractMethod<
    [],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<
    [_electionId: BigNumberish],
    [VotingSystem.CandidateViewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElectionsByIds"
  ): TypedContractMethod<
    [ids: BigNumberish[]],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyElections"
  ): TypedContractMethod<
    [],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyVote"
  ): TypedContractMethod<
    [_electionId: BigNumberish],
    [
      [boolean, bigint, string] & {
        hasVoted: boolean;
        candidateId: bigint;
        candidateName: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResults"
  ): TypedContractMethod<
    [_electionId: BigNumberish],
    [VotingSystem.CandidateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserElections"
  ): TypedContractMethod<
    [user: AddressLike],
    [VotingSystem.ElectionWithCandidatesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "startElection"
  ): TypedContractMethod<[_electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteWithSignature"
  ): TypedContractMethod<
    [
      _electionId: BigNumberish,
      _candidateId: BigNumberish,
      _voter: AddressLike,
      voterSignature: BytesLike,
      authSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionEnded"
  ): TypedContractEvent<
    ElectionEndedEvent.InputTuple,
    ElectionEndedEvent.OutputTuple,
    ElectionEndedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionStarted"
  ): TypedContractEvent<
    ElectionStartedEvent.InputTuple,
    ElectionStartedEvent.OutputTuple,
    ElectionStartedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ElectionCreated(uint256,string)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "ElectionEnded(uint256)": TypedContractEvent<
      ElectionEndedEvent.InputTuple,
      ElectionEndedEvent.OutputTuple,
      ElectionEndedEvent.OutputObject
    >;
    ElectionEnded: TypedContractEvent<
      ElectionEndedEvent.InputTuple,
      ElectionEndedEvent.OutputTuple,
      ElectionEndedEvent.OutputObject
    >;

    "ElectionStarted(uint256)": TypedContractEvent<
      ElectionStartedEvent.InputTuple,
      ElectionStartedEvent.OutputTuple,
      ElectionStartedEvent.OutputObject
    >;
    ElectionStarted: TypedContractEvent<
      ElectionStartedEvent.InputTuple,
      ElectionStartedEvent.OutputTuple,
      ElectionStartedEvent.OutputObject
    >;

    "VoteCast(uint256,uint256,address)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
