/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ElectionMetadata {
  export type CandidateViewStruct = {
    id: BigNumberish;
    name: string;
    voteCount: BigNumberish;
  };

  export type CandidateViewStructOutput = [
    id: bigint,
    name: string,
    voteCount: bigint
  ] & { id: bigint; name: string; voteCount: bigint };

  export type ElectionWithCandidatesStruct = {
    id: BigNumberish;
    name: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    creator: AddressLike;
    isActive: boolean;
    startedManually: boolean;
    endedManually: boolean;
    candidateCount: BigNumberish;
    voterLimit: BigNumberish;
    candidates: ElectionMetadata.CandidateViewStruct[];
  };

  export type ElectionWithCandidatesStructOutput = [
    id: bigint,
    name: string,
    startTime: bigint,
    endTime: bigint,
    creator: string,
    isActive: boolean,
    startedManually: boolean,
    endedManually: boolean,
    candidateCount: bigint,
    voterLimit: bigint,
    candidates: ElectionMetadata.CandidateViewStructOutput[]
  ] & {
    id: bigint;
    name: string;
    startTime: bigint;
    endTime: bigint;
    creator: string;
    isActive: boolean;
    startedManually: boolean;
    endedManually: boolean;
    candidateCount: bigint;
    voterLimit: bigint;
    candidates: ElectionMetadata.CandidateViewStructOutput[];
  };
}

export declare namespace VotingFactory {
  export type FullElectionInfoStruct = {
    coreData: ElectionMetadata.ElectionWithCandidatesStruct;
    electionType: BigNumberish;
    contractAddress: AddressLike;
  };

  export type FullElectionInfoStructOutput = [
    coreData: ElectionMetadata.ElectionWithCandidatesStructOutput,
    electionType: bigint,
    contractAddress: string
  ] & {
    coreData: ElectionMetadata.ElectionWithCandidatesStructOutput;
    electionType: bigint;
    contractAddress: string;
  };
}

export interface VotingFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRIVATE_ELECTION_TYPEHASH"
      | "PUBLIC_ELECTION_TYPEHASH"
      | "admin"
      | "createPrivateElection"
      | "createPrivateElectionWithSignature"
      | "createPublicElection"
      | "createPublicElectionWithSignature"
      | "eip712Domain"
      | "electionCounter"
      | "elections"
      | "getActiveElections"
      | "getAllElections"
      | "getElection"
      | "getElectionsByIds"
      | "getMyElections"
      | "privateElectionImpl"
      | "publicElectionImpl"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EIP712DomainChanged" | "ElectionCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PRIVATE_ELECTION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_ELECTION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPrivateElection",
    values: [string, string[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrivateElectionWithSignature",
    values: [string, boolean, BigNumberish, AddressLike, string[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPublicElection",
    values: [string, string[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createPublicElectionWithSignature",
    values: [string, boolean, BigNumberish, AddressLike, string[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateElectionImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicElectionImpl",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PRIVATE_ELECTION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_ELECTION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPrivateElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPrivateElectionWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPublicElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPublicElectionWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateElectionImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicElectionImpl",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    electionType: BigNumberish,
    name: string,
    contractAddress: AddressLike,
    creator: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    electionType: bigint,
    name: string,
    contractAddress: string,
    creator: string
  ];
  export interface OutputObject {
    id: bigint;
    electionType: bigint;
    name: string;
    contractAddress: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VotingFactory;
  waitForDeployment(): Promise<this>;

  interface: VotingFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRIVATE_ELECTION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  PUBLIC_ELECTION_TYPEHASH: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  createPrivateElection: TypedContractMethod<
    [
      name: string,
      candidateNames: string[],
      _voterLimit: BigNumberish,
      _startImmediately: boolean
    ],
    [string],
    "nonpayable"
  >;

  createPrivateElectionWithSignature: TypedContractMethod<
    [
      name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _creator: AddressLike,
      candidateNames: string[],
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  createPublicElection: TypedContractMethod<
    [
      name: string,
      candidateNames: string[],
      _voterLimit: BigNumberish,
      _startImmediately: boolean
    ],
    [string],
    "nonpayable"
  >;

  createPublicElectionWithSignature: TypedContractMethod<
    [
      name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _creator: AddressLike,
      candidateNames: string[],
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  electionCounter: TypedContractMethod<[], [bigint], "view">;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string] & {
        contractAddress: string;
        electionType: bigint;
        name: string;
        creator: string;
      }
    ],
    "view"
  >;

  getActiveElections: TypedContractMethod<
    [],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;

  getAllElections: TypedContractMethod<
    [],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;

  getElection: TypedContractMethod<
    [id: BigNumberish],
    [VotingFactory.FullElectionInfoStructOutput],
    "view"
  >;

  getElectionsByIds: TypedContractMethod<
    [ids: BigNumberish[]],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;

  getMyElections: TypedContractMethod<
    [],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;

  privateElectionImpl: TypedContractMethod<[], [string], "view">;

  publicElectionImpl: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRIVATE_ELECTION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PUBLIC_ELECTION_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createPrivateElection"
  ): TypedContractMethod<
    [
      name: string,
      candidateNames: string[],
      _voterLimit: BigNumberish,
      _startImmediately: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPrivateElectionWithSignature"
  ): TypedContractMethod<
    [
      name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _creator: AddressLike,
      candidateNames: string[],
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPublicElection"
  ): TypedContractMethod<
    [
      name: string,
      candidateNames: string[],
      _voterLimit: BigNumberish,
      _startImmediately: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPublicElectionWithSignature"
  ): TypedContractMethod<
    [
      name: string,
      _startImmediately: boolean,
      _voterLimit: BigNumberish,
      _creator: AddressLike,
      candidateNames: string[],
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string] & {
        contractAddress: string;
        electionType: bigint;
        name: string;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveElections"
  ): TypedContractMethod<
    [],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllElections"
  ): TypedContractMethod<
    [],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElection"
  ): TypedContractMethod<
    [id: BigNumberish],
    [VotingFactory.FullElectionInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElectionsByIds"
  ): TypedContractMethod<
    [ids: BigNumberish[]],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyElections"
  ): TypedContractMethod<
    [],
    [VotingFactory.FullElectionInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "privateElectionImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publicElectionImpl"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ElectionCreated(uint256,uint8,string,address,address)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
  };
}
